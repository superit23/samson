from samson.public_key.rsa import RSA
from samson.utilities.bytes import Bytes
from samson.utilities.exceptions import DecryptionException
from samson.encoding.pem import RFC1423Algorithms
from samson.encoding.general import PKIEncoding
from samson.math.general import mod_inv, is_prime
import unittest


TEST_PRIV = b"""-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQBUVwJ4kpnFlUTwpIA31fy+KFtcIU0mRp9/UkI3Y9AbMx0PfJ39
XphDWzYuCDh10QHhC/hio0ogzTjNaHQ3cLHuV85/BOQzVymuys3GYrmx4PQ48aaR
U4AB2cjzN03B2r8un7MWvmNrDSOT9RHFvHNzwWZlYjItw5ERY+M4uDvffZpiLIG5
7dGc0Wmcrowt7zJd4xPgcNdzP8fKleCxLvakMJVibh+jsZaBpuaygo62s0h8t7tY
NwCGsQjp6vnyClO49Eyf56t61UXXCzxfRwGQ7OnnFygk4FdH4cQxpmSra9L5FL9k
5NysBXXEk/UqSIc3+FdC+1KqRVXxRKuOYBcTAgMBAAECggEAPID7BdJtvB/ciCIK
1YOOwEAlYk+FkCrj6yvw0tmpBopBk8WbdZNx+ggqMxW0o1igV3kF5IUt/aAb2sfP
b6JKEyksu1Sf/PDPt1RIEMTsYF539Y3uJ51WXH2HOmv3PVWXB3SLvoowujB/0Hnk
GQ2baXRZ5+ttAgWlQWt+K0eHtEkLRVCeJ0AepBOGfCrrjkuayswFF4er5D+8jJZ+
oOsdxUNY6uMntJn2uK/kgWI29mBfkOqG8u4Y5W++F6c3Ye3izDQI1rkN4IFSUDMB
DLlLK5wPbTCayQkktEDiYj4Qb70ylmIWmNzZWM5b4VQ8ceyczT4t9W+fnbZtF9zT
Zc5M2QKBgQCoH3yQUjkWXR7yewd0TPmRbp/Ri7jf8uKzZGbtOtVWnFRolvnnNBma
CJIVQ6JC4H7bBVRMlKH60ybkj0aBWSYsR5MhkKi8CnXE3ErhKSrE3/3YEpPw5s8G
GL90h3ujPaRfUki8bAaA5QL8mwnJni5wDJX9Uxqo8lc6q1Qj4fkJnwKBgQCAbIRU
s76yTpPdz5JONV+gmxEOYGOBijMM308LCCHiuEj/yjp7rxGVct16kmPzYkAMNdtB
9Dpmoa6HTiDFXdJW26sS7EGjY9qQO9cMzGMOZc6Vi4bTdUJfiQBwe0FauDLp9Xl5
r5NUaX3/FeHkNIBVhvcFvfLVN6IT/HKpCZMmDQKBgQCJFyO7i1CBq+1QTIIHk7zt
mgc4F3bpJmU1YumLCC5uMYuivXmJzjISKGr2a/AkGGtYrT/QMmLi5MsSFMKpNsip
0rNm606sBtuBayCj+a2mW//h8UQxbAPkNMnpe5CVy+38zFwDSRMEh7mnwcR5Y0L6
m0izCND0cqgubwZtPBaWgQKBgDBismkHX+3mVSfZMRJuYZ0tT3vPLS59V0aeTDWn
1ryJGlflZat8Bm/8Wx33Udk9R0xSbk2nKunIOO2ZrhcuhjVbhlUW1pQs5wg4w4l6
6EdgbDlD3ISHRX6hK501kyYPCH/FkQMb97JyHJqjL/y/GyseMqvjKT7UOyi0kK7H
gL1xAoGAFizRvHqloxi3Pp+L9S1agxCaSDYcFoE73UCBAfWkHd1Ji/37Qa7bARiW
G8TIq6kR6CylPOz4UiGWbp5Fz0jKZMUROpUZo+g6OLxyJBaZtv9Tj2zF0Ek2w7+f
3eyhIl+K+rhJsKQJeZWrQhJjT+MjSGjMWRowPRpYM8p9gsMmQ+I=
-----END RSA PRIVATE KEY-----
"""


TEST_PUB = b"""-----BEGIN PUBLIC KEY-----
MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBUVwJ4kpnFlUTwpIA31fy+
KFtcIU0mRp9/UkI3Y9AbMx0PfJ39XphDWzYuCDh10QHhC/hio0ogzTjNaHQ3cLHu
V85/BOQzVymuys3GYrmx4PQ48aaRU4AB2cjzN03B2r8un7MWvmNrDSOT9RHFvHNz
wWZlYjItw5ERY+M4uDvffZpiLIG57dGc0Wmcrowt7zJd4xPgcNdzP8fKleCxLvak
MJVibh+jsZaBpuaygo62s0h8t7tYNwCGsQjp6vnyClO49Eyf56t61UXXCzxfRwGQ
7OnnFygk4FdH4cQxpmSra9L5FL9k5NysBXXEk/UqSIc3+FdC+1KqRVXxRKuOYBcT
AgMBAAE=
-----END PUBLIC KEY-----"""


# ssh-keygen -t rsa -f test_rsa_ssh
# ssh-keygen -e -f test_rsa_ssh
TEST_SSH_PRIV = b"""-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEAyAB4rl+5x3Xhq6Hd0WSl9QS2kMNH5YIIa+dcy05Vi+APPuYhhnmu
LvpZbwspDw5zIiDdDS9WHY+gALJPM7L2Iff1Y4MU7bhyvKCOFJvMV6jYRoEbPD0TSqNUjU
KkZHF0xAJ1E42HbtyJbpOyZVa9YPIu5RLvMAtsHCxoU6kn+Y7Cl36P2lVKya6mIG7K6rbg
VtLsG7uAzL/RXQnQo8QtN5bh9XPrhsRI/s11TFnFgEkd7eOD3jN8e1/b1dajYy9usc8xgP
yl6L95yFQ8JoUZBdvO6UXee1ICQhs8GBhicBpUGWR+sTn09ePs57fhXCkZ6u3l9o5Ie/SD
orhsoKFyoQAAA8iPVCRPj1QkTwAAAAdzc2gtcnNhAAABAQDIAHiuX7nHdeGrod3RZKX1BL
aQw0flgghr51zLTlWL4A8+5iGGea4u+llvCykPDnMiIN0NL1Ydj6AAsk8zsvYh9/VjgxTt
uHK8oI4Um8xXqNhGgRs8PRNKo1SNQqRkcXTEAnUTjYdu3Iluk7JlVr1g8i7lEu8wC2wcLG
hTqSf5jsKXfo/aVUrJrqYgbsrqtuBW0uwbu4DMv9FdCdCjxC03luH1c+uGxEj+zXVMWcWA
SR3t44PeM3x7X9vV1qNjL26xzzGA/KXov3nIVDwmhRkF287pRd57UgJCGzwYGGJwGlQZZH
6xOfT14+znt+FcKRnq7eX2jkh79IOiuGygoXKhAAAAAwEAAQAAAQEAnIxR6hufrVLGG7QN
jnM7u7e+tz1Dr4/Cy8NDTRe5ukzdYhx8LWhdQQRQsKyJrPFgiVwz6rgcrfLYCPOJLyxroF
cYSpY18YUouiDqVZNFtW/CKh2wlcwwp4GFEzUQvFZaUXqi7XUgh1Q0dstBHjVw8stejYvu
kSq/qqXP23xSf/EtmmF14N8EbMlDBJaFLOjqoKJ0F84A0ZTCCQJomWCCv40UdAiTp1b6ZC
EV/BXppXvsl35w5JQhqsjXZBNHDu1UIneQ0qiwRepXGU4trkhawGoBkJQ/1SR8gv4taFnw
gQbQQxfDK/zgcqYnYIcCtQvPpzxwkGj50I6IbAKP7fRXqQAAAIBhCmb+qsBvTSu55H9t2e
26Yr6jIsNK9Dz2nK3+s5Ypo1z+qR9Ol2tqV4Eqylbl2N9m37MHMvPBqqJRRkZ//Cnv6rdH
btrdnN8/WUSyEZTn0fJ/Z/ym5xeOxWf7rXZ0x8shkmFx1MaoybLFo1vDInYkjXzIQEU/fE
t31K1ZZOOqSAAAAIEA8vlEXLZS2vq41VyjWSr2aN6/OhmitDUDP9DXkKRDCNIfMVh91YgE
hJ+fTohoRr8tQrBy2L/xSoTm9MPvSA6ZdR8Rb1fekdVt9E/OGJiI4zBzyxgZVGMNwrb/wH
Lzp9cv+iN9U1pRvxxvMOgH1ALWsWbAuf9qQ9zFwA6X1ybW86sAAACBANK5bhG2hkxB6WkD
n/Vwl8bhGbrresxqRpYXEXmE36aRH/UyQBiH2n9MaKirwAqHoYe5B0SrUD8+Jwxk13Yl5z
vq0G0fTHmWkG0Hg48TltvujewmQxWPlixSocs9dxZEXFY320z58dwVaIH020NlKqktZGCH
0Op+gORSv1w7lCbjAAAAEWRvbmFsZEBEb25hbGQtTUJQAQ==
-----END OPENSSH PRIVATE KEY-----"""


TEST_SSH_PUB = b"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIAHiuX7nHdeGrod3RZKX1BLaQw0flgghr51zLTlWL4A8+5iGGea4u+llvCykPDnMiIN0NL1Ydj6AAsk8zsvYh9/VjgxTtuHK8oI4Um8xXqNhGgRs8PRNKo1SNQqRkcXTEAnUTjYdu3Iluk7JlVr1g8i7lEu8wC2wcLGhTqSf5jsKXfo/aVUrJrqYgbsrqtuBW0uwbu4DMv9FdCdCjxC03luH1c+uGxEj+zXVMWcWASR3t44PeM3x7X9vV1qNjL26xzzGA/KXov3nIVDwmhRkF287pRd57UgJCGzwYGGJwGlQZZH6xOfT14+znt+FcKRnq7eX2jkh79IOiuGygoXKh nohost@localhost"

TEST_SSH2_PUB = b"""---- BEGIN SSH2 PUBLIC KEY ----
Comment: "2048-bit RSA, converted by nohost@localhost from OpenSSH"
AAAAB3NzaC1yc2EAAAADAQABAAABAQDIAHiuX7nHdeGrod3RZKX1BLaQw0flgghr51zLTl
WL4A8+5iGGea4u+llvCykPDnMiIN0NL1Ydj6AAsk8zsvYh9/VjgxTtuHK8oI4Um8xXqNhG
gRs8PRNKo1SNQqRkcXTEAnUTjYdu3Iluk7JlVr1g8i7lEu8wC2wcLGhTqSf5jsKXfo/aVU
rJrqYgbsrqtuBW0uwbu4DMv9FdCdCjxC03luH1c+uGxEj+zXVMWcWASR3t44PeM3x7X9vV
1qNjL26xzzGA/KXov3nIVDwmhRkF287pRd57UgJCGzwYGGJwGlQZZH6xOfT14+znt+FcKR
nq7eX2jkh79IOiuGygoXKh
---- END SSH2 PUBLIC KEY ----"""

TEST_SSH2_PUB_NO_CMT = b"""---- BEGIN SSH2 PUBLIC KEY ----
AAAAB3NzaC1yc2EAAAADAQABAAABAQDIAHiuX7nHdeGrod3RZKX1BLaQw0flgghr51zLTl
WL4A8+5iGGea4u+llvCykPDnMiIN0NL1Ydj6AAsk8zsvYh9/VjgxTtuHK8oI4Um8xXqNhG
gRs8PRNKo1SNQqRkcXTEAnUTjYdu3Iluk7JlVr1g8i7lEu8wC2wcLGhTqSf5jsKXfo/aVU
rJrqYgbsrqtuBW0uwbu4DMv9FdCdCjxC03luH1c+uGxEj+zXVMWcWASR3t44PeM3x7X9vV
1qNjL26xzzGA/KXov3nIVDwmhRkF287pRd57UgJCGzwYGGJwGlQZZH6xOfT14+znt+FcKR
nq7eX2jkh79IOiuGygoXKh
---- END SSH2 PUBLIC KEY ----"""


# Generated using ssh-keygen and OpenSSL
# ssh-keygen -t rsa -N 'super secret passphrase' -f test_rsa_key -m PEM
# openssl rsa -aes192 -in test_rsa_key -text
# openssl rsa -aes256 -in test_rsa_key -text
# openssl rsa -des -in test_rsa_key -text
# openssl rsa -des3 -in test_rsa_key -text

PEM_PASSPHRASE = b"super secret passphrase"

TEST_PEM_DEC = b"""-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA9tGc4zTrMLKECbMgkbXi5p+lOcL4QhXcV5LjMMARIqzv03I3
wDJPhqL9FNn4ZCQUjKfDbfaBXISLkjKtNj8jAnqWYnxgfsAgx1AhujN0rjINiUmN
V0cCeTunzfbVzTXKwyYS6rgZokC0LNous0I7RY1HZTJ8iKgZVdHKbDbGt1kJ9Eky
Gy/hmgpUFYFDOQEBRS+gpRIWEVSnhGybjwWW0apx3fbtin1nxWjZUh0KblsayNgF
XSkExg7Ny3dynTKVPXMIz6TqBYz2d1IooJN60WJQfSlGvP95oyyFH8OntSAVgXf1
2zJa0ldUD9D2Ce77mONn4nWrteNryMa4LNtFRQIDAQABAoIBAQCQKZiwYO1qcSqM
G9NPKGTSfbbdCRNGTkx33jTS+axIi6g84b7MhNZMdpDKCBJ8M1LJYQfWB6BBcK2x
A+aGA9SoEwAZoDogbon2wMgiYQGq6VNct9hVfQVl2EFIHP9+MAgxeeCctlFKou5a
MEoMrAfAtSdZZWa1zzGVHcdU852X4sU32x8LO1MwT2mMC5BiXXXU14w0KjNbBAGO
YzhmtpH2Z54epyge8JPeC5DNaOohcYL7BXKr/pI8i3VoioXYQaunQiYRoA66jmcN
STstuS/b44uGBNOqQQfxlWsoWoB2c6IpXDWrd61msbF80s0jRly2/B1sIu4gam56
HiVYeMbBAoGBAPvrHLsKW7Vdq6ardiiZXVA+SoqIGJTUMHpYFFxd5s0D+diBY8f6
hssi47l02dwPTJEMne6Zrmi5iz7h88L8mH3+q6poo5szCYRYacLEkjjhq8VOhObK
sepG3ZlM/G7wKmX0CWdFTOfxBs+KVzV6TqyJDDRxm2r83EP47WNCTE0RAoGBAPrR
WU6b9vrLuWXFqHGO2PivHaGDrPCrI4tCqcdLZYbVJkQvTAR2zlpa7MPxBRhhL5YE
XxL9HnNyY+mEhfbHmfNyPE7y0XK0YmJcHLMYripJu+lC9QSGSN0nqqpTPRS+KhEU
b05I+m+NyLVg6Wrq1kJHf0SPTKo4NHjsgHLTjUT1AoGALVHYs1VjtjcJwEwsT5V3
kg4CvvVI5s1dg0UBNLS35r4GXoq4dqt9QGIgcaax4sLl1VpdtyTymWh3wnJHthZX
IKOGInv8otkFp0d4j09pts3yZuZ/Rj3E0A67ou6UoyiVmA3U+z0eXsOfpAqRMc+1
A5kMFwsxGIgw4BGSMz8kFuECgYEAif2TfMQh5Wkf3vYX7iIBDRCK5Mlk5CPDsmJC
tfqtKLksDGdZEzup29waVtLLUtZlL8vH4tKPZkSQ43Cdo1+9O0qmE2lUAh9r4WF8
CKyTZYCbeYH0+0BF5iZkpsCU4kydKDht5EwSPD1tJxziTohUyLI9OqL8MsopVD4J
jSMGneECgYEAo6Nc2bk07mOASMy3egy6lUhqUI6qm4obd0oQ3IiztvU+/irfEyO4
DS3s4u8oCG8vYXqmuARgTVf3xmpI8Aer82UbSgJSzTA6a8l8iTx2cHhwxuO3kKlw
qe6ackLbeWhkxWbZPinj3+MHRY3c5uN7O+YA1OTD6T9XdDNJPqT5860=
-----END RSA PRIVATE KEY-----"""


TEST_PEM_AES_128_ENC = b"""-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,6C31F9B4A2413CC6889C3FDCDE20C22C

c5SAYW6C36T/IR2biLFQBt5rjDnVMZ9GEkkv+cLy7Z+PCMPwWvDYCW+H0dg49LR7
slt8cVjYKUvsWxKYsYV524OGVqaz/mJ7kj6d6ZILODBz5xfDiN2l+W1iBAUrQ8ct
Z7lgmUF2XYHtwFGEubHcxpVCD0Fwl+w+/KemjwQ/BovTYc1fTJzexHJmxTYYhbXw
vW0bN3TfNJ5Bsk8izZlH9lYGDnveccAQy1R+iEOyp07+0kuTpGOBQnAtKNskTUwr
W9umE5BeZf1GY/OkYXY3mKFYBgkMFv99WrPN22gAGpbP4eAxpTsqb9BUtU0idBEB
Fvq2eGZw/L+or9XdmIVGL++rEGZ6gODiSVWhdpJ1tTSMcdzYCkDSycSGOaTT6jqu
uH/c/RupRyULea5KisImhifSbB7IWT/YWo/LVupgXRZV2OXLwaj8XyiyTTvsgNSY
ehHlEdoOArgibTZQSQxZ7nMxD7ndnf8aNsa2YPfQoOLeK/rP02SYpysKCS6ewgsM
b3/DXrJE/gU2vXoNYROMx86WOBPk5/JHrweghJBaByHK1FmmmlIRKBx2vOETebmH
wwKIgm+jdUOOmYMY/hglNykqTX9bup5BtdZvmuxqDhoAVXCl8mrHtkKW/f5N4kDS
4ONbFDmhB6axlrtV5VxQyhjtcnNexbz9YPjDHojynW1s+nUWx3j/fO70sFFge8s6
D7WHO/MOjbw79GIsOfRTcV+uuJNTRVvRTX6+gPRRA0QbHFi7BiPBmtq93AhVa6Z5
fXvzhGUewMX/GnyJGgeU4nfBwyh29ZnAa+goeIOs/q7h2H8PYZFyQ8jQBXqB5xMN
EoS+pGcFVM3H1WGxYc04sgY01gZcgmbuXYMtbl4W8T21qbIolktxXVqxU6vifD4j
NnHi7BTZGSKwVXy8RS+RNSfCFxizz89InUVfZwziv50JKWU5VwlSKb6TDemLJEwt
bgyjQRlagCg9GwFqZe7813vQae9+PXZ6tDCjCn0DwPDFJrC8/CFQ5Wt31wWihaaX
oVj0Ds4o5FVoZ0TZ9Y7vawKeciU2UZkjWtraTclrQXEhDPPDYlFtd2X6P4xvbZo3
Q/AcsxPPBZiYZDnKVznO/uFbXfZ3pi749qirc21SBZH1iSZNXeM4JIasuWg81e9Z
lKOkCVxaq4do+Q2w4BqtLtMJQsRrWQypy29i+LGwaGcnSMYQo/rmDQuF0nsqy/8O
yF4ih2msc41UCMPT2xfYRFQfNswX+6czomD15LSS1ulbwpV2ARZ+CoelOCd1X6EJ
/Gkp5igWZQfIyI4u/5TnbjX4oXaRTNy0kbbBPZsM2VKVxRntEFq8zV/qO7aM2A/o
3L6hQ1vsc38JzX4cL0+/DoWWZ2zdn/Pbm5BVnmpLrDjfbjAixNZk5/P3cTbrg2W+
6sUdrIDKjVUyrq4k5Tpl1Bez/DJcu0riBdPA6foXWaAVb6VeSC5MhCypGrB9UvpX
vpynKRiClXMNVZs6h8ji/xTMK4RTg+e0gpyROcrux4pSC6C/crsQ6fd9B47QdCy7
U8/BS4zBl/Jyub8zoChmNUc5i+mzKHIFy41cnRhiGxAwHsLxP5o2f7r522wynUGa
-----END RSA PRIVATE KEY-----"""


TEST_PEM_AES_192_ENC = b"""-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-192-CBC,2256864A7896D06FD40F473D91884CB5

UMq/F2BWxgpIr6Xvp/JrZSEv5BvBnSSvzFLDfUPyVL5PgQZHX1QIXKYbJ/hB3nJp
IbTNAZsCas/nL9eKiZOIg6CkO2Alm/OMB45e/tsi2LFg054oD3xS/h4pXF5XKLpx
Fq2j05ctzo3D58PuHsR1vBNXsMioip3YAhaJW3GMc56g3JmCfgcBCIgVVeMAIKpp
q6M7APrBExccd/ws3+cwcNxOPuHclBYnehwh++dhT9Yvw2BuvKHj4NmLBgeLm+4z
njDZs5PUFUMkWZvY5186eZFu3PXk0kcs4nEYJ6WfX+vM5swiu5lC0YGK7Lij2324
mfQVhWpfbAX1gKupRoisIKtJkB/kf2MtU5TdJEHNxP1GEk/QHheskwzM1y6BC58L
JJ6n3n19xXtOOPM3UydXIK1UH/S2qRnNZc9opqC+ixU1lRqfzbFvn0KlfHuJ4jxk
oPYbM/tZm8uykvVsTKJz1h0I0IRvtrNZSA7ci8IV6b8+9/hLspZ3TzWasWhwCu53
ri3dhhEQS93nV4QM5m+2PdQoW1cshG2IiVJBGBh057HnJJaSca8e0lb8BCHERfGh
+5L/im+JhvdZJ3qj/55SBzr2fR/qQUfjL7uOmxUBV4GZ2b8l19r965PmxtpmstMf
ESfaI0AVQCSR7aaKO+RQRBoVulW+50Os/qdjC8CKLDUdubftf1p9tRt07C7r+6uz
Gz+K2nJri4xpVfFMS9pTfkSxHVviMj89+4a8E7a2DjoFW0+HK3u1eUbWah3kBl0X
EkJwOoXVydeyUoGcGUT1jZPbHl1tJ2urwcJ5GMA0m/5Xu4IA9HI7OMbvm0B2UZMZ
cGRGeiozSmIorv3LQoPGhwx+6Qoi0g5SA4chZrqSUNZgYvPTcVdbQP4eTxOFx8Fr
WTmTZv2CXpxeOCZxEnVWb8BakdEYwyxD+3FqDmLvaEW1dVDAwtlAQIO73Ulcgtt7
UJ4rgSKK7P0Qyi5kWWks92UmEUrqwq0UAz1czGGdUkcwa/F/lzgneEQlcYgHnpzP
czW3RPv+1CyVRmmlWQU+n0gOym5Z5R+Al3Q/rtJKoJtsbeuHWHR0RK4zZElU1VNd
mxJ2iHVn1FaLWAqGNyCNK9/WB4EGDQfzL0xoXc3yWXVzuNGCJ92HaVtHQ+dNiyS8
vd5J4Gevi/BFWT+/s0Vo6Iw/ygOlhB86ELs9Q/aUNechyjso7KIgO4Zh+O9gO+jZ
xKgl5Gt7KovdSsdWmk8pFEhznaZTwHi9uPz6uOs1TqvhbtUDloQOBPX3RcarNQXW
cU2UOSuPwxFdiw6hUmOSJJpdv1xORZa9Q2Aheup627uj8d80mG0HpyPOuVsumxm9
FIUfN/am94YL9P5qGFvscFSMKtW/W0o5mhZKTuAukgbbwCG1MgL61l6cg/SVEMTp
glV39RQVxXLqsd/xJi+g/UaSiYP7GOOzjyCS2+j1uOm0JnBD5XVbSZwf9B1WBdpn
fZlsu1m2CYLstTOH2hqNzVU6dUBnIEUQ5tr2707cVXXqdXkxFblavRKKZywLdxf4
kfHyfsVArbTtDFW8gs8iyWfwqcSz86uHoNTW6tGs57f4Thix8+xgSD+xdVBszPDS
-----END RSA PRIVATE KEY-----"""


TEST_PEM_AES_256_ENC = b"""-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-256-CBC,CFD06BF9EA82CCD1E643AD7AF22391D0

MT0nrqgcTAbYpP3iLpzXMVlKSeWxgyutH/nkzHewtHeQhpdBIziO7v7eDTM+3CWI
yXTTB7DXPlbYfnmwz2cF6X9bOWLMnvdsJ0Agmt9ADP2nKqpcVPgtP7gpaZ6rngCE
CDs4uFG44sEMKfhTcyUwXyfmuyq4ju/DN/aC6ABQH5PmI6Bli3+9PxcZxhRgzMR2
Ej8ON23Euc0TsO5SoBTbZWoYqbR9ng59q41iUYRjOiatgb1KzqrxcXujNMFG4G1g
y+OMKn2qmwWnQSyrHK3fljImaEjPOjF1G4RNYSH7qBKcC4tpbmqzM3J/sEd49uqx
6xlPNIA/xx/uAIHmnom74KajGM4cWQucOfxV5U6/Wh/QXJtIY/LcN3gG9YZ7imPJ
PisPDDV7Z5d1lflvHiInBDJy2JdleeeEBnHKRsELXODgXCyBjUSAL/V4qw8oB99a
LPRbhDthmRx/RLtubbYIKPp7gq2vl84dsEnQpWEdc1p6TMjKacjHt5wDG+LIzaVr
zZ3XXgmiQH033OtZVQytRY74teaQZ6yzU9iEKi9C5RjcVp1gO38RRR77NzYYhY3E
Q6TRCmIezip4rFGEkVGv+MFdecnAegYLY7j4vi63PvzNgVqFNXUCQwyMPeY2Rn5Q
c3CKIPMHcIVox8O5q3YsjYfFM3bVDSb4y7W2bFlX+r5C6rnHW8k8hB+lOi0cm0vQ
pWF9UR1+3KBBTj/yjlwH0F70HlrblsqaofrqwPmX1UYJITF/qSf5yn93RelLvHZ2
CCtXJ6Wdrs/k0dW8LWEFCXTWCAcNO68ey6fM2cOlLg/aSMuq+9CNICIO/X7XGDaL
I5xj4MZS3cvWsNXXjBqJP3JWq/0wKUjGAG+nJVa+plwuO597YdkXDAQ7QI+yISad
SZlgNa7lrEd4OlYOqk/tfHHn8l5wW+5UnI+M8KUB0zNSS6j29hI0JtKIylI0Lvsg
qIGTgSpYdu0FxOfQcBZNBxQES1gIwqtcnmSQUJ5dIQwcwnCXVKNg/LCyTa32HXZp
b1OuD3+CqcCC77hk+ish9WJoM3p1OjcNu90zwEVvVfuTcSbgZeXvo2ipWn/1sb60
Gkbddww1Y2kfEbpaeW85G43K5Vgdid6rtSycak2RLcH5rxE1As10J+wK6s0963+Q
an9s9BgC/KBOBmscFjO9q7kps5HyMZCzI2LPyDyj7gBOXF9OaiyiLM6Kgic0Ddly
BfWqzL5j62pM7O9aqw7l2zXg/AG7wcsfXprYZJHkHCJ3S6kmPVSfoN89bUo5fmAq
jVYUvI/0DeGuzQvx+zoneOZSJb9L5RbrDiXXR3tuECXqW/1bb2kaT46eF4a0nOSN
tXBgqjZ99jLY4oyuDQDl4wDSdN3WGqX1xJ19vQLoMP0hhBsOolvX3UjyxPuMpa+u
VAU2QPcMDxfy2S/4211WvodRigDkaIeBOkT28q+62aKaVWfnAB6Y25BD6n8KblF4
hgvTjuf97TNpSstrntOs3u62v9TtnCScQ1PPZZGQ5IY1SMrdmL9PhcRUplVNI2N8
odsdxovBZWIGa2DsWrlQIgK8wyYVscl4Oh9TZtziswLJNCE2eU0uJzouTAU1Jjt/
-----END RSA PRIVATE KEY-----"""


TEST_PEM_DES_ENC = b"""-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-CBC,0E0E35BFF36DCE88

IcSVzkFHsN2cPNnTEW8A4Oyhyt+MCcWGggOWUQexDAfYeRd093XBKisDqJHnNNSs
Gdp6IrY+aFhUXid9cbxk0i4nZGMl/G1d21YaFGLsgTfDW+V7bWJBAvK2GY1hxxA/
U619UcVXd6i6cd9EY/GiYz4aWBHL79nMcQsNFdyNcnHKGKrFHl1dFW6GROaHd21r
3xugx2BGuvcEHvJl3fg+HowIQ7b+AEtN5FInrAuRk41s2z0hvXfn8leakusNo5ay
zTAxjzdaEA8QOAqos+yh3ixdLYPeJ0LCUQWalqj8suRt6TaQkybwKVrWBh1sGyWg
D3yoTuNPMT6XxCaggO7uxaexR/DROO50VhCIEL07DCKoqvSOZX/Fg9fkisxlxzHk
0V+mrACMiCcDjstoxPrWg7kNArB+rGiZ3u94hsjUv3tG7qRsJaBIhK49bPPV/OaB
Q+qFesYT0/8/QX/kPAiR3c/sD0lcO1o6g+LCaXgVxiOzbhvn6fKOhmyes2990buN
27GPIBq9U86jf2slY0eyW4l5IC2W/ZfIJH70lDIkR7UcJZJlaTgxz7f2xUH+iQ2i
BJ0XlstzZFkDs1qR7B2MkuvLUasi1QgRjP4Kur+lNnIbooQav4NJlzivKysfKnur
m7bL2Og9p8ueeJ2+dvdskc/lc/RrhlyyR0OdDRcwv7H1Q8kykNAla31zaZ3w71js
MFuF86nljkGpdh3zN0vlJiaWZVHts5Y7ym6e9yJiIA5r0JCaS7ETKG5+oZeEQW4E
wzBCGGhIAcU4SeHIzr6g+OP/d5ml3PvjikK4+gRE1GW1ulIh8MoIPDpIcviuz7ZF
2UaDyfE6/o7rxWlUhFYW8fjbKjLG8sJ4faKiJLTSaEnZ+icRb9B7JFLhNk/57RzV
3zfrchLeF5JlN0GiqegsuA3SYiISOwRK4FLXC5v2IEtWApJPhsRKSnmLUcDldr8q
quaFHMxkfq5KTY66t0p/9pDkUlrZaSK3QZHMZd60c/fnHDCAylQkG+MYVo0JKOYO
3P0Eh9/V/QYAKCMeGL42GNO2wLZtjJHOyHTTkk+SRtti7xw50aJM+P2FyTGPdZIT
8/tdzEAir81pdi5ykkyPRyI5F81ErBdlUoUj+rKGAkPhUiSEkQ2RsA9vIfjyLd1N
1Y9VTgLfqnRDMw1NwF1ssGucIPQtjS+ffBRsJTaca/jI8jDZSawCESrxF4J2prAA
Icgec6FAi5yFzIclczGwTzEw/+jpHxccHnrmc3FgNaNzSCXFRBS108cZsxi94dFx
zIdt4iFOnDFAwbOy9pZie9qRV1OKULaeN6KOZYLIA0imAfVWrXq1M7Ia2dZEPGIW
M+NGs7cX4AFah+CiuniZYt82BgUESRfNVsD4ycqWpT62zFqtW32igJ9etLI99YHO
Yp+pMSKNB78+gXBoOdGH7AcFjz76U1zOP2sa9TaCZTojVPm+nTw/bDMJs9w5H0PR
qwdVQ23iERAdj5oQiA45AQ5+pDfV+hTFieAyvq743C8HIA6GNPmO2++Br34pSvwb
JW+5mP+vPtazOF4ipYJ+B/B7wdHdVwFWhL5s2UCDiAwZaiqxfzE5UkaEvUJj0Bcg
-----END RSA PRIVATE KEY-----"""


TEST_PEM_DES3_ENC = b"""-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,0BF4C53B0F1AE4B1

uRk4SdVx2ZN285xmliGpD7wsa7ZAfnMEKjRJ/5ccJywiYS13nrOErZP0UNl4vFLe
NEOt4GBNgZ/3KwvR7Da2jXUTagdTms/zSHUxCJhmBL3zqvySmxMbBO7EbWf0rBMv
poyN+TCbxoBuG6WIXzFe8T54FbLh+MPW6N0G3FI/M8FdozC0CV2pxZ1iXG2LK2ut
msh2hWhFX9ca+0VVed6Wmk1Lr77aky4DgP9xx3tjvgEEvmcLK9QHPOuqUJBszT6j
vjHpJCBnbcGOc6ig3eIWyE3hPciQyq4zG844O1/xOiV+cGxZB/XzJnGBX+RTbzjB
uME/WobgJYi9hADN1rP0mxI73k+nCpIgVWpbOF0hwfNb3b7Yvgc84Spl8+Mb0a61
hVpCsBA1eVWxHqkCdeGNL/jKofThtzyQ/KwZ0mWLzvz0uZ0p670yXewwFQdQ/T7F
mG1z9eu0ngtrdCkdga6gmwfvWHLcL98VG/Jl8ADMil1NNz+MN55Jh8S5X5Q7cdMv
gDHmVNo0oVk4IZTJ6DiWxvhBU+p6HyT3f1MfTT4S+iJLYHd/DWVso7wXLiwChsVW
0hxOqg82/lZ17gFpFSvRTQB53/qXAuDLgTQclFhu2SNwioRvT7/kiMIJIAzg6zSM
cBBC8DP9m0FQEF7qbRQhlRKGrW13bkvKaQlS+HwATSbvaFFORbJOThv8xN3gCEko
RylEBZgo6lpS38NEb4YHGIC3MJeuvmCt6B+FX98RJjjb0xEkbUToLA11dSzbtL+L
iE1K/QTaTcefPvQZWV8X7SQ0gCstEW0dmjBKWF0NadD8tJ3sBollsnbAz+EW5KWK
cSHK+l9P+EXYYoNZ22EiNJRd5V2FQJZ4GoNomDNhxMxhq20fqs3x8wSnAe77rHF5
73sRaGACOEYqGOgj4M/1mw7oPPz2lcQC3ia9uuCpTbso95cGvJLDlJCWTeALU39R
s2LcsMeMUY5sXNU6KhXCJ3yho+D7b2z50idVUlcxWyvgYKJJ1jkbQpsC2xSE6GYR
kdCG9jlyUnLTZFMqgys8CJhtBMMTVBt9PPXpj7u4/L+KWSKeza1SLuCbGzhcvTYE
DqsDQLJoD6NKgqeWkaSRXJHGiHdCbwWYk378RCyT2fc4e/A/ekIBcpGu1VSjKIUx
o67CaY+tWHhwFQC3SIki/y7lO3/Pconf1o4tMktlVzbDaXD6aaMP15cpmRKgL3eR
d9qBFVObDDAXjxuuaiuUPfcSlXiap++oDWhUDguNdOMZv5nZ2DFGXKoR8WFjedSM
b/XM5oZFGMnQEBzD5c73CC3Ux64hTKmo+Qu/Dp9uq8BmH3AiIEjEGs88sr3jGvMi
IE63nI+kiQHZ8dmMH6L3PHPrN+jmWV8UCjLiXgjuy/PkGxy5kd5rY99E1bp+vBmw
xd6mwhPC179R3zPtDKfKc2LMIcPkvGSfdu3a5tFmshFDSCGsuSt+5M8Fp+wKxmPe
2IvvXDsXkbg04VXkLzOpwHO7SWnAZyG5Wbfa/56i4yFmJsXWAZDO12gPceSsHfyV
IAJRveiZ/NlnRs8g01gaIKN6DyHNjt+VbbwUUYOG1y1XCpfKTK8YZSirL7UpfHhP
-----END RSA PRIVATE KEY-----"""

# ssh-keygen -t rsa -f ssh0
# ssh-keygen -t rsa -f ssh1
# ssh-keygen -t rsa -f ssh2 -N 'cc01529c0b05424c'
# ssh-keygen -t rsa -f ssh3 -N '611d58216f198c4e'

TEST_OPENSSH0 = (b"""-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEAt9KOn3LRrbVqT6/od5qPQBQNA/Jr0eYeZOHLKKAoo4bbCVC19cLE
LL66QPviDLGjcz7On8heIi9WgD4XdjRKwm5hZnE+Yoh3tOxOUyOpIxLDYefTBmayz9VNpB
ORVw/YMKM3DFu07ngy2bQTIQ7yAJl/iDwnOb28l1iWeKRHYxA2crHXYveXSwF5GOYcXZ3Y
qCWkJtMv98xUYPgDkCJR59XCwR7POt8tgqLsOqFobN2Q97LaMrIS+8mcFAss97wLsoNPFE
uOapaB6UNNA76kbRXCNmdLUOlByOuPacfGUgzJpgjAM76T4D65WAhlCZJZhecdjhLZsKNl
b1zTC0Z0jQAAA8gmu4hkJruIZAAAAAdzc2gtcnNhAAABAQC30o6fctGttWpPr+h3mo9AFA
0D8mvR5h5k4csooCijhtsJULX1wsQsvrpA++IMsaNzPs6fyF4iL1aAPhd2NErCbmFmcT5i
iHe07E5TI6kjEsNh59MGZrLP1U2kE5FXD9gwozcMW7TueDLZtBMhDvIAmX+IPCc5vbyXWJ
Z4pEdjEDZysddi95dLAXkY5hxdndioJaQm0y/3zFRg+AOQIlHn1cLBHs863y2Couw6oWhs
3ZD3stoyshL7yZwUCyz3vAuyg08US45qloHpQ00DvqRtFcI2Z0tQ6UHI649px8ZSDMmmCM
AzvpPgPrlYCGUJklmF5x2OEtmwo2VvXNMLRnSNAAAAAwEAAQAAAQABUjMSNEoLfI1KC1KZ
YXP8GujJCXn65TN8uB60qQoButtiIsFcBc1RIQHHq8fBHZm2H1Ju1YrPphVyEIAsqk2LPi
3XBaNUI/TwSO57LHtvtBfRYVAj8KMCWV8YeceGn6eHGfUwUoxnVlfPNrsYdroIhRHkkcIa
aSGs2MckENIuhREt1kQMKrTl3bCsh6TYTRDPfb/b6348ng9OteTEX5MKpxrwQkCI2xSpZU
1BlxuHAKVXsfU0bREfCGfyuTbIaFEaGIvLvGVktx98ZXBLxjD/i9rIN3f2kh/3x7v67v+2
ICAXAwzCDs24lf52PWqIlx01/ygArkvkqofeSqNWPCTlAAAAgQCiyORMui0u8r4jI2RRHj
5jOWo/q/agi90JwgH96T5MB86kMbF0RiiMVNT6FVv6w704MKUA5Ftqw7JoZwN1akTcK1Yf
BruZReOEqPgmLHctYDD6SfCFC8DxnqroLRtBcbKBq6JQocmuE1gSI0jXcXCQocANgP2gHR
YjoWl4EBGPUgAAAIEA7LLi1MdfSewqchiSrFjogHGTZ6Vi9p6FKyjVnMbQTaZAj0ah+tYL
Ct/89CwEW4JIxI0Gaws5KB6FCWd0UnDyQnkoqM3M21lnfV4d2p/RICGzgahdpAbm3t+FSX
+ZGBAJHl7JMAU5QNcwaiDQKi3tXkG3XBRDe9or67VsDBCVqUcAAACBAMbP32DyJiB9gFBB
62uzOnKLDoNX8Gkeaofq2Dj8OeBClw3HBV3YzvZZ1f0B6irAF5mu/o+OmCT3nS2CGzLIgC
IjQssU7g07TEI5HXYUTu5snmemXCvjPEAtgH4UC4tnmzH/bVgj43lp9UgF00HrmSHL3jo6
Dhp2CE5XSZLetZ2LAAAAEWRvbmFsZEBEb25hbGQtTUJQAQ==
-----END OPENSSH PRIVATE KEY-----""", None)

TEST_OPENSSH1 = (b"""-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEAu34rzs+Q7S4Uubi52alPCJur94IGfb2yswu7hVrlmO+sIFoxXDRC
iM/bNwhLY67nRT2uzc/qgG3hOflgLAdqrqfm8Lq6kr32XP1r2+Bmm7njt1eP16kOWnwmie
eVQj6HZUOTVHq53BmF0XuwIR6TWmQgj3XHz4uZtdHWSfebb2KI3XAa8w8sjBlbucvf+Ym6
XcgFAiuZLdjFZ+QNj3hTqxDvGoT3GuCSJbiz2t2n6P3S0VxWnqBu3BXW4xCHejj0S83rKQ
8R4TerBTjnn7egaVjEUOeLM1uXBDnSN+5h9kzc8lAK+WNTK8bCplvp8LeIcZ3yZfhkr6Ig
kMOnBCRa2wAAA8hhG6a/YRumvwAAAAdzc2gtcnNhAAABAQC7fivOz5DtLhS5uLnZqU8Im6
v3ggZ9vbKzC7uFWuWY76wgWjFcNEKIz9s3CEtjrudFPa7Nz+qAbeE5+WAsB2qup+bwurqS
vfZc/Wvb4GabueO3V4/XqQ5afCaJ55VCPodlQ5NUerncGYXRe7AhHpNaZCCPdcfPi5m10d
ZJ95tvYojdcBrzDyyMGVu5y9/5ibpdyAUCK5kt2MVn5A2PeFOrEO8ahPca4JIluLPa3afo
/dLRXFaeoG7cFdbjEId6OPRLzespDxHhN6sFOOeft6BpWMRQ54szW5cEOdI37mH2TNzyUA
r5Y1MrxsKmW+nwt4hxnfJl+GSvoiCQw6cEJFrbAAAAAwEAAQAAAQEAngDE8EMRsh8cTirz
TA+XT/zIXguQZtS/TI29mLMyO8D2wEjhwf80dtEbvvPZfIb/1OUXc9AcoeB3ZoDWYCRb7h
YG06W450L45AKYq7IfJmrwESjUSnzoYK6xV5P2v92sAlWBSjcme+pyUEg49KAss4cfvWYX
XbsabRQJz0nADot8blDjbFazfaMtbx9YlbGz3PdXc0Ohqw4M623pL8ZsB60MwWIvpGY0wN
wlsD9Tl0XqfeTsXE3giygPvAZZyZwbLWGQA1KEDYWklGZyP4lvmmPtNoj5AxglqS6lGqL7
p+oxg47XnhIX83hOYBEHQ9Ob0ZcwEdmw3IkC5Tx8vlIzCQAAAIB1ncUR2aBdBKKMQTPzFF
SFONAwsmyCO22UE2Z5c04NWTL+L40dYvA5vPjRylhxrehaCXDr/VltT8eTiy/6fUJ/RQyD
Dgn3VP3y+zluferE9vApzvTd0B87wviR4ChLmJs1Fu3KeV7KZr4bhZS0kg88qeV9s/fccn
Z4bV/WZ9fliAAAAIEA5kVyRoE3N6thaaJOQTbExb2JeLUxjEE015ZaiHRz4YnGydu0cUKN
J45i+gq0hwR3HbDy+Ab5dEXmx6iir8c9JrwpbZF2c3YGAs3ls+5K+IQ8mOWzGG31t5TE7E
zudGRGAzdQFsFT1iNorWlyX26/vCcmIILp4L34/ziKSOh3hfcAAACBANBxHT5/gfk5XoDu
G7YSP6OAXLZZTS8WbHt2+qsHJwtQsHUP8qW7mOhC+n4Mj/6fHG1T2NUDOde6vTyk28qeYW
PXwRfGX2PtJ13K2wHKQvTeYJCC525hliGoWSVEPeBwcfIlPO4JNXJDLHafayxmIkbsty0N
gxRLNHa4Vrozukk9AAAAEWRvbmFsZEBEb25hbGQtTUJQAQ==
-----END OPENSSH PRIVATE KEY-----""", None)

TEST_OPENSSH2 = (b"""-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABBjGrElFg
Jb8RUUY3xsedSwAAAAEAAAAAEAAAEXAAAAB3NzaC1yc2EAAAADAQABAAABAQCwXRN9Hj13
Rp3qvIj/NCHPBHyDUjlRP/5oOfRdYJfLEXVgTXg4vr3TfRJRcjP/gRjTq07+XEOcrSZq2G
Pk4RhEN9LCQZMcBVItzeVkkaX40FiswtLaww73Kjr8lyIXFiYLPHFRwfFLDMsONPF04QrQ
B9jAwuIQkf6RbXbvA93agvUo/mOi02bq4irxX6ZXKxSc6qTbPSfkq1hBvSxDGBSdjTl+Ct
GymVywTXBQcv64Lrf+XNq49UevAgNXrYnM8coQ1opdmI6a60DjKvhyiHC9BPcKhIPv5S94
kR/EGZIazyUquhrT8J18YZar7zBgptf2sqB4H2VwrQ1cdz975qaRAAAD0Kib/WJDS3Cbtt
V8aD8XY4ipB/tclTiAamY8ZY6dRR4DHITzhCT8l75bUvyORakSsNxGkAWsMZT7tCCsAkgO
9ruB0muPs5tyhS7HOwHTyoJsxDl9+RlpXw6J6eYvOlVNBCPWOTXKYfeZE/4q7xPgNA4goo
Sufm8EDtQwTtffWnRstDrhAi1e1/5lz7FInwCYBlkClVaJG8cWD9ZfhFR9jtWJWHyTJ7dT
JjzSLerxx4140l6/FtDRNq7WI5GyrVXzRVFrlKoAkkkf2obsQP+1cvVLVASH6lwPgXicuu
3D76UIocChnO0nnnP6BKDJo6Q/qaoD+TQ6i/wdk3/Az3cQUN4+TNARpOGNZyWX1yaitUcl
iifdXghJeSBLoOfbB5ijW0Yy9LWTQoKDaIpqBhuooilZ1SyeOG44IFHWp1S48oj8Eigh60
bSflwvsyF0LE8BDES4bthxbEbW8isZwFhmy6KLS1I9Yif39M+Tl+zeTW+FA6RUHRAoE/TR
od26od+AeWnh8Hj7JgEEpdUkNLjA3uUiZWlQ8AAjVwh91Md2Rv8M07ELSRheZtatJJMU0p
OYcTotAm/Np1TBISM05LS1JlMakB7McmsFQGMF9KVuSro3gnb+2+Gb2sxTX3yHYWc+mIQ5
NKwKzKPZ/mqv43AtrjHTCZBYuX6Fpv6o/lPxz5+ttHCeknD8GlFRZT/u7moecrKsr+os3s
QNqFGGALBaOus8vJHS4moC8xyWnjXiWfeU4AJyj/3LGNTis7/iZb4ig81iuOw9PtW74b6S
mNykt8Bdv0/Dy6nSuRRU+Wik1a/Ec6mFXvxJLGjmTOg01WYWbZ7oXxxJyFdyWKI9iWTQyf
w2fu6m7VKVbO/8fETBV6qt5X/+H0LqVq1cyMB0BCFY51lgAg6y7yXmQQ6Zsc+RYT/X2IZt
HTP9J9dlRsSuIjD34ydoKwfOcaNZQ0CjqnBlIYWLsMz8V3u4ApY2HYaQt+EAbLgKDFUJ0u
knJDoaHUH4pnUF3Ll6TvntQcj6sHriPRRZa8K9O1iFldi+/iZKyyvri23w05Ue0ZFhkAl+
S3VNuXsrenGzU432Q2VV8MjWmmz/bUiaPFhdLOSGekGbJizpKh8pU/WSm3CyzgBI3vD6h3
gMudyEACLXqjaVCPqyj49PYm63WO4jOgHJN+68nN11t2xqvLvHSDxwoJGLacIOhyxsezm4
nGMtRE1prMld3PDS25BsZoErnhwLQl72jTrrZD9ZhkhccLisp9sfHEbbAUOl4szkx8ifli
MfCrWp+7B9tvBKHdjT0FTwR0DBr20=
-----END OPENSSH PRIVATE KEY-----""", b'cc01529c0b05424c')

TEST_OPENSSH3 = (b"""-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABCOGp2NC6
xGqstrHVWKVPQEAAAAEAAAAAEAAAEXAAAAB3NzaC1yc2EAAAADAQABAAABAQDR8XsoxyLM
D83hNul86fuCza5ADfPXl/tYg3GPTbqiakG7AVRi6yeQzRs3ZZBMElzshjJht3sDhL/0vT
Gv+IrWFho+WZn+Kq57iaD4tXjjufuxrlKPfHb7WstukuUlfkjbTBrUK+4uVGECiiBcsWh0
T9pSjFTERF1P4gArtzMiHCAXxFO8n5sTgr3Xzry89/QYRhWGj+XE/i5Z/oEajz7C6x0tgA
zw3Pu0loYnaJZi7Fh0qNKQUfIhrLbWyodt68enzmarE0VtwBq45AOUJEB11zeoC7X6mn/2
EBLcuxHDvuUHMxuhaVGW3h55IlkOD2+iXKqOJzXFTg0k2MovRu8jAAAD0IM8K1CzrYAdRB
ZuYVcmss+H2L29BBRcBr/b/E9f3gOY/99vDhz+Z3K9LMoXSvVnO2isZZa2Rn7YNq6kgzQJ
YN8whVHs+rMnBDbQ5XnmIavzxzQ3FJDBiaOrBTiA92f6SnlbrnxBcp/GwXeYER52kjl8Gl
IkpCYzYEbFHFlBkSRT2l5j9rWHBRnSUA0qWsoE9uZeTmGhVTBXepz8VlrkZPZQipTa3Hli
AGkr84YcjK7S5mm6sas3uH0rieujMNcQ5xE7qqCkcdZ8oHGMZnPZ9G8Yo2LCKn226nVBiu
QclcipjMH1eWyBZXNUMxXFeeIESCcZvF294yhB2jdcdDxbEd9lDLlWjSaWeo0ydwgPdDQT
C4l88mZCBmSb/2o8RqQ4j8zxCQJuQ0SoPoZ1bhkd+DyaWFMaulKQryivkGDd2a+4QvRFJp
1GpIG2pNtwkHjEw6dAMmSCjxCYYYQHlvoDwkbQe4LajTv1PIDS7pYIT0uxf5BHyyGFiVB6
CrhI1TlsJsK5lUNjLDLytP/MBAYRm1DDWQwxK+vV2GPbwq+N3OR3e4dT+F7HOfOWYXwkPT
aZbrWp7/mitzmXSwZDochQW30SREl5VoqOaquNUpj5Mtj5wMNvtIqYq8gfcUPALYj1L/cm
+rakiySK1mBuo+mhTiUGAw6XcOJ4KwJvHqC6OYJF04Bc8g38JqoqOtTl+f82I0TbzmyUN+
KkwOuuSaQDfPQ0NMB4piwHQJHurLGif9BYOU5g3nTHrXRMZm9B4zbStT2J6ata0C/Dolk5
o6kiG0ppabA+X4qwHhFC/2Z/PtxWi3I7kx5G0DnWKElpt9GZbI9uzrsVKxcXwSiDbRmewl
7mZ7OlOGEDSM+zTjfWLwrnulfGYWq467D5lY+PsE5m3A4bRWiRtbh+8ji8E8AnmB1ovlW1
UjddvqKRYGWaaZ365B3wImC3lVgpstbkFGoc5GuNykueKCT5RuRAEqj7VxDaPvf28MxU20
hMQsUwrKXF1y1XHOxPi+ByBPuNwJpd4yJWtT/YoxcRy8FvDUSwGLKYavw9e8ln2pD3fIEQ
eyaILmQGCaTk7CW2cIPcEcQbkPvURZPBaQ/7VZZxBqLochOi1oVFVgqXFXWGicvVlmdBLo
1pVIS7DdgAJMUkttpjPMSgOBjbU8F0W2308ibQuU5bxJ+kpYluAk1OkReBryQRzrj8Nda/
3WUwoOVnHehPNnUEHPyavQV7gfD9K4EfSFg/5qKMecRQjpXBpUcvN0fLVsRXHYp6lnnbFf
vF2o/WsGf840G3PBQsGef1nQPiwEU=
-----END OPENSSH PRIVATE KEY-----""", b'611d58216f198c4e')

# https://tools.ietf.org/html/rfc7517#appendix-A.2
TEST_JWK = b'{"kty": "RSA", "n": "t6Q8PWSi1dkJj9hTP8hNYFlvadM7DflW9mWepOJhJ66w7nyoK1gPNqFMSQRyO125Gp-TEkodhWr0iujjHVx7BcV0llS4w5ACGgPrcAd6ZcSR0-Iqom-QFcNP8Sjg086MwoqQU_LYywlAGZ21WSdS_PERyGFiNnj3QQlO8Yns5jCtLCRwLHL0Pb1fEv45AuRIuUfVcPySBWYnDyGxvjYGDSM-AqWS9zIQ2ZilgT-GqUmipg0XOC0Cc20rgLe2ymLHjpHciCKVAbY5-L32-lSeZO-Os6U15_aXrk9Gw8cPUaX1_I8sLGuSiVdt3C_Fn2PZ3Z8i744FPFGGcG1qs2Wz-Q", "e": "AQAB", "d": "GRtbIQmhOZtyszfgKdg4u_N-R_mZGU_9k7JQ_jn1DnfTuMdSNprTeaSTyWfSNkuaAwnOEbIQVy1IQbWVV25NY3ybc_IhUJtfri7bAXYEReWaCl3hdlPKXy9UvqPYGR0kIXTQRqns-dVJ7jahlI7LyckrpTmrM8dWBo4_PMaenNnPiQgO0xnuToxutRZJfJvG4Ox4ka3GORQd9CsCZ2vsUDmsXOfUENOyMqADC6p1M3h33tsurY15k9qMSpG9OX_IJAXmxzAh_tWiZOwk2K4yxH9tS3Lq1yX8C1EWmeRDkK2ahecG85-oLKQt5VEpWHKmjOi_gJSdSgqcN96X52esAQ", "p": "2rnSOV4hKSN8sS4CgcQHFbs08XboFDqKum3sc4h3GRxrTmQdl1ZK9uw-PIHfQP0FkxXVrx-WE-ZEbrqivH_2iCLUS7wAl6XvARt1KkIaUxPPSYB9yk31s0Q8UK96E3_OrADAYtAJs-M3JxCLfNgqh56HDnETTQhH3rCT5T3yJws", "q": "1u_RiFDP7LBYh3N4GXLT9OpSKYP0uQZyiaZwBtOCBNJgQxaj10RWjsZu0c6Iedis4S7B_coSKB0Kj9PaPaBzg-IySRvvcQuPamQu66riMhjVtG6TlV8CLCYKrYl52ziqK0E_ym2QnkwsUX7eYTB7LbAHRK9GqocDE5B0f808I4s", "dp": "KkMTWqBUefVwZ2_Dbj1pPQqyHSHjj90L5x_MOzqYAJMcLMZtbUtwKqvVDq3tbEo3ZIcohbDtt6SbfmWzggabpQxNxuBpoOOf_a_HgMXK_lhqigI4y_kqS1wY52IwjUn5rgRrJ-yYo1h41KR-vz2pYhEAeYrhttWtxVqLCRViD6c", "dq": "AvfS0-gRxvn0bwJoMSnFxYcK1WnuEjQFluMGfwGitQBWtfZ1Er7t1xDkbN9GQTB9yqpDoYaN06H7CFtrkxhJIBQaj6nkF5KKS3TQtQ5qCzkOkmxIe3KRbBymXxkb5qwUpX5ELD5xFc6FeiafWYY63TmmEAu_lRFCOJ3xDea-ots", "qi": "lSQi-w9CpyUReMErP1RsBLk7wNtOvs5EQpPqmuMvqW57NBUczScEoPwmUqqabu9V0-Py4dQ57_bapoKRu1R90bvuFnU63SHWEFglZQvJDMeAvmj4sm-Fp0oYu_neotgQ0hzbI5gry7ajdYy9-2lNx_76aBZoOUu9HCJ-UsfSOI8"}'

# openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem
TEST_X509_CERT = b"""-----BEGIN CERTIFICATE-----
MIIDWjCCAkKgAwIBAgIJANzyMiWHayMVMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNV
BAYTAlVTMRUwEwYDVQQHDAxEZWZhdWx0IENpdHkxHDAaBgNVBAoME0RlZmF1bHQg
Q29tcGFueSBMdGQwHhcNMTkwMzA0MjMwNDA1WhcNMjAwMzAzMjMwNDA1WjBCMQsw
CQYDVQQGEwJVUzEVMBMGA1UEBwwMRGVmYXVsdCBDaXR5MRwwGgYDVQQKDBNEZWZh
dWx0IENvbXBhbnkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
o0R7Qc8TgO/0WD6pg23xCpS78O3AKYMRVVEBnf0NfWfuhJ277S4ac9rVPsUcBROV
+nuN41z5oF+VMQtkd/ySpbLWDgPAzirpeMWreDr45X2A0y2R0oZL13nlYkNmOJk/
0wt+pwvIIc4mmkK1i9EE+8YQamt8i6Kb0LmHpoS0/UsLKSI1Y5VrLFW9GzxZARic
etlygcZuGOMH15iFZ2Ha0bulgTQX0Qe5BtugztbtI/h41SAMNk8Tt+eXPGSM39oF
N3yYGCYy5Vnzyzsk9vr/wnVleMqZz8OxP0o25oqqVQednNW0KUYwSIezhWjwbKNv
q00OQ4XDX/2Nagiiu6/aLQIDAQABo1MwUTAdBgNVHQ4EFgQUrC7v5sk8Y4gNrgOF
vzl2SMBLbD0wHwYDVR0jBBgwFoAUrC7v5sk8Y4gNrgOFvzl2SMBLbD0wDwYDVR0T
AQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEASMk4GpJNTHeMGpKZHPEnP2X0
e2b1GgvvClZDK3F5LBfogCP4wmCcsiMReZxvm6ejwgNyCmtZMJxznrQ18SeD//08
6qFlbrpORHtq/6OdDogUPPXbreQXebEfizMQN8lcmfiaDee3NUcu42sWYpo/RLVL
zoGfTtIO+1rQqtz/tLsUajLvQIA96g0N6itks1RjCm/sS6tJNcEpHCfgzwBLMJWG
7lAuUc9GuARJYPVVh941v+ODGQJyXRmE4mLF8QWAA/utQ1XX//k+g55arNrPXJk2
FNfP9tGjb9/rs6s3Y4CcF1Z0lvWpXGiFl0nvsJ2UYjMzeY+4CkDnUO+eYLVTmQ==
-----END CERTIFICATE-----"""


# openssl genrsa -out pkcs1_priv.pem 2048
# openssl rsa -in pkcs1_priv.pem -out pkcs1_pub.pem -RSAPublicKey_out
# openssl pkcs8 -in pkcs1_priv.pem -topk8 -out pkcs8_priv.pem -nocrypt
# openssl rsa -RSAPublicKey_in -in pkcs1_pub.pem -pubout -out x509_pub.pem

TEST_PKCS1_PRIV = b"""-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAxZF5+kYqwg40dhncrUV60LxFdcugWXS+0kmXhNlkr9wVL35a
VvPB9o4j8JKQyw3Fcemnxj5bnIm3fXmT/0BmZiHUSeXww95SheY3+ZwXAjWcTWPv
4HK1dmvOiqDVinITWnRDxFOqBa7HywOMCJYWtY5Wu0C1W2Bh0KTutciC9hfAHnd3
C8KZwxOvO3L95D59UEnoz2iA95EAaMJacEzdywgH7Xzya4pyKhWcDnMzScI8Xcqc
KOXEeYzY9a0mNB3HGSXVXElSYHEPsNQAhyhAct9s7swY2tWlU4HYvpZQVmMzn3sb
LTJBHlszm5btrLUfg0fLGcM7MehxpGYesBCH5QIDAQABAoIBAAISL1QnTiVwnq4q
QTzzwIDVqGi+tLSbW7C6osL6wGpzhSlVSr8kmQDrpobMEoZ+Y3Z5O5ABcVZnvyuq
jZmcZDZn3mDT7z0uZHEQ479TGo6kXzoUdRxGN47BPI4Jd5OW9Ir7Mwao1dxvY5rG
M76XTC+lCVW3LO+DSCM2x2XSb0UDIADXrxFV+J8HQ5qs4m2LDxhodsCCLkC78Zvr
SslcPF9EfFApj2e3UGCEpF8FLCu+M2KEk2vTLEa/dCBW3ebFCexbBE92nG6mLhFb
Fdy+ecjrCaGfFiaqyLohwej8k/EqppYJpH1ezh/8EO/uLBypF5fVkYr1XFRHHpzp
VPD8HAECgYEA7JcXpNoPk4o8wJCRZkoJZOCv63rbtkVsXvB3VIJk0tC/vxC6gPPv
UCzWkyehk+T5XLtEjnKhFzbvojFo67xDQ8/YYd5nLR/G/Z6AexdVLyfAjavwVm/F
ohcSObDi3QL/6QP3PEXD+ns79+w4V7uqoJCvsugl/nVZm+pWJXA/sQECgYEA1cbW
uZfJZf1CwrgdLN6XO6mGLifb4RXvlrbuuC2eXGWndnR4E9U98H3MTfcDHKFiuVu8
2oL+9NXnyalwe3ErHchkrdECmokZmAU6Gc8XztFV0TpkmeSQzB4Scm7G2qQHV8QM
DvgW5RXSf+Djmbru05AoiUdDUzq2v1tvDOGFMuUCgYAXC+DRviwmQyEH4Q1I2Y1w
tjJszdr5NmoIFYSKRulrX8pN4mNIjHqTZMrCKuoibfucfOGAvsnSaReOxSFjVUN4
J5b8cZ27V40ax4Xcd7lkjorDQix3PwwRbg3ocMKopNIo8Kn0xRcCH18IF4qlgTJt
0apL0zFgSC4icgFSREzwAQKBgGqWLVFz4LK9R6AWdFV+1iClMYWp0fO0IDUhGH00
IZUoCgsBny0kUTGrR0ZINoD75mFM4CiCz+P7Ewp1NOQXVMwQskIHyCiM2vn1ATcF
DnXL4eHkH2yrjZZ4F/J+UR+KUS7tTKXaBHBMJRwlYNWxYoqRgeSQZ30D9UILsJ7X
grYRAoGADpOEhCfkYGdHLBPaPtrbZWNhhPEbPFZflT9SgTDft2XQTLqB7uAlQoxR
/eYX/gOj6DrVJaOjY/j6jX6Nh3/SZAb9TW8wvg2hPp4F+9hjS4/c1tSoo8gFPiRx
XFQv8uzuqqDv4lgPVJBBBz+B6hHU4E52USJ/YxH4/G2iatqEkIw=
-----END RSA PRIVATE KEY-----"""


TEST_PKCS1_PUB = b"""-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAxZF5+kYqwg40dhncrUV60LxFdcugWXS+0kmXhNlkr9wVL35aVvPB
9o4j8JKQyw3Fcemnxj5bnIm3fXmT/0BmZiHUSeXww95SheY3+ZwXAjWcTWPv4HK1
dmvOiqDVinITWnRDxFOqBa7HywOMCJYWtY5Wu0C1W2Bh0KTutciC9hfAHnd3C8KZ
wxOvO3L95D59UEnoz2iA95EAaMJacEzdywgH7Xzya4pyKhWcDnMzScI8XcqcKOXE
eYzY9a0mNB3HGSXVXElSYHEPsNQAhyhAct9s7swY2tWlU4HYvpZQVmMzn3sbLTJB
Hlszm5btrLUfg0fLGcM7MehxpGYesBCH5QIDAQAB
-----END RSA PUBLIC KEY-----"""


TEST_PKCS8_PRIV = b"""-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDFkXn6RirCDjR2
GdytRXrQvEV1y6BZdL7SSZeE2WSv3BUvflpW88H2jiPwkpDLDcVx6afGPlucibd9
eZP/QGZmIdRJ5fDD3lKF5jf5nBcCNZxNY+/gcrV2a86KoNWKchNadEPEU6oFrsfL
A4wIlha1jla7QLVbYGHQpO61yIL2F8Aed3cLwpnDE687cv3kPn1QSejPaID3kQBo
wlpwTN3LCAftfPJrinIqFZwOczNJwjxdypwo5cR5jNj1rSY0HccZJdVcSVJgcQ+w
1ACHKEBy32zuzBja1aVTgdi+llBWYzOfexstMkEeWzOblu2stR+DR8sZwzsx6HGk
Zh6wEIflAgMBAAECggEAAhIvVCdOJXCeripBPPPAgNWoaL60tJtbsLqiwvrAanOF
KVVKvySZAOumhswShn5jdnk7kAFxVme/K6qNmZxkNmfeYNPvPS5kcRDjv1MajqRf
OhR1HEY3jsE8jgl3k5b0ivszBqjV3G9jmsYzvpdML6UJVbcs74NIIzbHZdJvRQMg
ANevEVX4nwdDmqzibYsPGGh2wIIuQLvxm+tKyVw8X0R8UCmPZ7dQYISkXwUsK74z
YoSTa9MsRr90IFbd5sUJ7FsET3acbqYuEVsV3L55yOsJoZ8WJqrIuiHB6PyT8Sqm
lgmkfV7OH/wQ7+4sHKkXl9WRivVcVEcenOlU8PwcAQKBgQDslxek2g+TijzAkJFm
Sglk4K/retu2RWxe8HdUgmTS0L+/ELqA8+9QLNaTJ6GT5Plcu0SOcqEXNu+iMWjr
vENDz9hh3mctH8b9noB7F1UvJ8CNq/BWb8WiFxI5sOLdAv/pA/c8RcP6ezv37DhX
u6qgkK+y6CX+dVmb6lYlcD+xAQKBgQDVxta5l8ll/ULCuB0s3pc7qYYuJ9vhFe+W
tu64LZ5cZad2dHgT1T3wfcxN9wMcoWK5W7zagv701efJqXB7cSsdyGSt0QKaiRmY
BToZzxfO0VXROmSZ5JDMHhJybsbapAdXxAwO+BblFdJ/4OOZuu7TkCiJR0NTOra/
W28M4YUy5QKBgBcL4NG+LCZDIQfhDUjZjXC2MmzN2vk2aggVhIpG6Wtfyk3iY0iM
epNkysIq6iJt+5x84YC+ydJpF47FIWNVQ3gnlvxxnbtXjRrHhdx3uWSOisNCLHc/
DBFuDehwwqik0ijwqfTFFwIfXwgXiqWBMm3RqkvTMWBILiJyAVJETPABAoGAapYt
UXPgsr1HoBZ0VX7WIKUxhanR87QgNSEYfTQhlSgKCwGfLSRRMatHRkg2gPvmYUzg
KILP4/sTCnU05BdUzBCyQgfIKIza+fUBNwUOdcvh4eQfbKuNlngX8n5RH4pRLu1M
pdoEcEwlHCVg1bFiipGB5JBnfQP1QguwnteCthECgYAOk4SEJ+RgZ0csE9o+2ttl
Y2GE8Rs8Vl+VP1KBMN+3ZdBMuoHu4CVCjFH95hf+A6PoOtUlo6Nj+PqNfo2Hf9Jk
Bv1NbzC+DaE+ngX72GNLj9zW1KijyAU+JHFcVC/y7O6qoO/iWA9UkEEHP4HqEdTg
TnZRIn9jEfj8baJq2oSQjA==
-----END PRIVATE KEY-----"""

TEST_X509 = b"""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxZF5+kYqwg40dhncrUV6
0LxFdcugWXS+0kmXhNlkr9wVL35aVvPB9o4j8JKQyw3Fcemnxj5bnIm3fXmT/0Bm
ZiHUSeXww95SheY3+ZwXAjWcTWPv4HK1dmvOiqDVinITWnRDxFOqBa7HywOMCJYW
tY5Wu0C1W2Bh0KTutciC9hfAHnd3C8KZwxOvO3L95D59UEnoz2iA95EAaMJacEzd
ywgH7Xzya4pyKhWcDnMzScI8XcqcKOXEeYzY9a0mNB3HGSXVXElSYHEPsNQAhyhA
ct9s7swY2tWlU4HYvpZQVmMzn3sbLTJBHlszm5btrLUfg0fLGcM7MehxpGYesBCH
5QIDAQAB
-----END PUBLIC KEY-----"""


# Test vector from
# https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/SelfTest/PublicKey/test_RSA.py
class RSATestCase(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None


    def test_kat(self):
        plaintext  = Bytes(0xEB7A19ACE9E3006350E329504B45E2CA82310B26DCD87D5C68F1EEA8F55267C31B2E8BB4251F84D7E0B2C04626F5AFF93EDCFB25C9C2B3FF8AE10E839A2DDB4CDCFE4FF47728B4A1B7C1362BAAD29AB48D2869D5024121435811591BE392F982FB3E87D095AEB40448DB972F3AC14F7BC275195281CE32D2F1B76D4D353E2D)
        ciphertext = 0x1253E04DC0A5397BB44A7AB87E9BF2A039A33D1E996FC82A94CCD30074C95DF763722017069E5268DA5D1C0B4F872CF653C11DF82314A67968DFEAE28DEF04BB6D84B1C31D654A1970E5783BD6EB96A024C2CA2F4A90FE9F2EF5C9C140E5BB48DA9536AD8700C84FC9130ADEA74E558D51A74DDF85D8B50DE96838D6063E0955
        modulus    = 0xBBF82F090682CE9C2338AC2B9DA871F7368D07EED41043A440D6B6F07454F51FB8DFBAAF035C02AB61EA48CEEB6FCD4876ED520D60E1EC4619719D8A5B8B807FAFB8E0A3DFC737723EE6B4B7D93A2584EE6A649D060953748834B2454598394EE0AAB12D7B61A51F527A9A41F6C1687FE2537298CA2A8F5946F8E5FD091DBDCB
        prime      = 0xC97FB1F027F453F6341233EAAAD1D9353F6C42D08866B1D05A0F2035028B9D869840B41666B42E92EA0DA3B43204B5CFCE3352524D0416A5A441E700AF461503
        e          = 17

        rsa = RSA(512, p=prime, q=modulus // prime, e=e)

        self.assertEqual(rsa.decrypt(ciphertext), plaintext)
        self.assertEqual(rsa.encrypt(plaintext), ciphertext)


    def test_gauntlet(self):
        for _ in range(10):
            bits = max(16, Bytes.random(2).int() >> 4)
            rsa  = RSA(bits, e=65537)

            for _ in range(10):
                plaintext  = Bytes.random((bits // 8) - 1)
                ciphertext = rsa.encrypt(plaintext)

                self.assertEqual(rsa.decrypt(ciphertext).zfill(len(plaintext)), plaintext)


    def test_der_encode(self):
        for _ in range(20):
            bits = max(8, Bytes.random(2).int() >> 4)
            rsa  = RSA(bits, e=65537)

            should_pem_encode = Bytes.random(1).int() & 1

            der_bytes     = rsa.export_private_key().encode(encode_pem=should_pem_encode)
            recovered_rsa = RSA.import_key(der_bytes).key

            self.assertEqual((rsa.d, rsa.e, rsa.n, rsa.p, rsa.q), (recovered_rsa.d, recovered_rsa.e, recovered_rsa.n, recovered_rsa.p, recovered_rsa.q))



    def test_import_export_private(self):
        rsa = RSA.import_key(TEST_PRIV).key
        der_bytes = rsa.export_private_key(encoding=PKIEncoding.PKCS1).encode()
        new_rsa = RSA.import_key(der_bytes).key

        self.assertEqual((rsa.n, rsa.e, rsa.alt_d), (0x545702789299c59544f0a48037d5fcbe285b5c214d26469f7f52423763d01b331d0f7c9dfd5e98435b362e083875d101e10bf862a34a20cd38cd68743770b1ee57ce7f04e4335729aecacdc662b9b1e0f438f1a691538001d9c8f3374dc1dabf2e9fb316be636b0d2393f511c5bc7373c1666562322dc3911163e338b83bdf7d9a622c81b9edd19cd1699cae8c2def325de313e070d7733fc7ca95e0b12ef6a43095626e1fa3b19681a6e6b2828eb6b3487cb7bb58370086b108e9eaf9f20a53b8f44c9fe7ab7ad545d70b3c5f470190ece9e7172824e05747e1c431a664ab6bd2f914bf64e4dcac0575c493f52a488737f85742fb52aa4555f144ab8e601713, 0x10001, 7637900981413881127344732199207423148450857019726723094659043462794313258767201253269496359678839942555541437712415706663660985252940123204794095993626699211163986533562336773310103190916142252882331767886927729021516529141672972169957951166501750445256177733568843099186777096376892875529534391517354389358568809006385725873288954661635538351606457829485241023554979084645466210495420866845750976009860684015622002855709494103022482640146893844516679296838305756556603312962721311081086887412291530082263197989863828789712221961262494351622769754044860656696333724061992404959980518191241190042534000830303328685273))
        self.assertEqual((rsa.d, rsa.e, rsa.p, rsa.q), (new_rsa.d, new_rsa.e, new_rsa.p, new_rsa.q))
        self.assertEqual(der_bytes.replace(b'\n', b''), TEST_PRIV.replace(b'\n', b''))



    def test_import_export_public(self):
        rsa_pub  = RSA.import_key(TEST_PUB).key
        rsa_priv = RSA.import_key(TEST_PRIV).key

        der_bytes = rsa_pub.export_public_key(encoding=PKIEncoding.X509).encode()
        new_pub   = RSA.import_key(der_bytes).key

        self.assertEqual((rsa_pub.n, rsa_pub.e), (rsa_priv.n, rsa_priv.e))
        self.assertEqual((rsa_pub.n, rsa_pub.e), (new_pub.n, new_pub.e))
        self.assertEqual(der_bytes.replace(b'\n', b''), TEST_PUB.replace(b'\n', b''))



    def _run_import_pem_enc(self, enc_priv):
        with self.assertRaises(ValueError):
            RSA.import_key(enc_priv).key

        enc_rsa = RSA.import_key(enc_priv, PEM_PASSPHRASE).key
        dec_rsa = RSA.import_key(TEST_PEM_DEC).key
        self.assertEqual((enc_rsa.d, enc_rsa.e, enc_rsa.p, enc_rsa.q), (dec_rsa.d, dec_rsa.e, dec_rsa.p, dec_rsa.q))


    def test_import_enc_aes_128(self):
        self._run_import_pem_enc(TEST_PEM_AES_128_ENC)

    def test_import_enc_aes_192(self):
        self._run_import_pem_enc(TEST_PEM_AES_192_ENC)

    def test_import_enc_aes_256(self):
        self._run_import_pem_enc(TEST_PEM_AES_256_ENC)

    def test_import_enc_des(self):
        self._run_import_pem_enc(TEST_PEM_DES_ENC)

    def test_import_enc_des3(self):
        self._run_import_pem_enc(TEST_PEM_DES3_ENC)


    def test_import_enc_gauntlet(self):
        for algo in RFC1423Algorithms:
            for _ in range(10):
                rsa = RSA(512)
                key = Bytes.random(Bytes.random(1).int() + 1)
                enc_pem = rsa.export_private_key().encode(encryption=algo, passphrase=key)
                dec_rsa = RSA.import_key(enc_pem, key).key

                self.assertEqual((rsa.d, rsa.e, rsa.p, rsa.q), (dec_rsa.d, dec_rsa.e, dec_rsa.p, dec_rsa.q))


    def test_import_ssh(self):
        rsa_pub      = RSA.import_key(TEST_SSH_PUB).key
        rsa_ssh2_pub = RSA.import_key(TEST_SSH2_PUB).key
        rsa_priv     = RSA.import_key(TEST_SSH_PRIV).key

        self.assertEqual((rsa_pub.n, rsa_pub.e), (rsa_priv.n, rsa_priv.e))
        self.assertEqual((rsa_ssh2_pub.n, rsa_ssh2_pub.e), (rsa_priv.n, rsa_priv.e))

        self.assertEqual(rsa_priv.p, 170621934107914837135188221741345039360973520058114456501388562509658795389537603696495314914263307477879633584504500740005298573150803280618484950209080803799140960436472056595329677438530606065566161783436714140793820145487700054413432516764645134976280363736900482101671242116081306644146548602721659188139)
        self.assertEqual(rsa_priv.q, 147975660846396990587026799132395215581845148822588177668939892854130080870127891229734413269282872842954263443501467315040323804831400031921589112815742747614415764378548901698763469577356909867186752247509564255224167675065755796937983163876790155687818626513794653480829583948160749345458911841406938261219)
        self.assertEqual(rsa_priv.alt_d, 19762369934989515131049274315841316326050549933114536766674916078250573730800216520650633877972440419194814420402043176472759537753254149225125134250003994948721187698467807920387489440310994705791482721107511012797884534895932222871683633147680034924999627916905359454912445366494543706676734716375543152258328317139760580320162173490414588340925370831975060554770385250590880497700813834231770436219310405458193997653119990344803085718020467915664214557758416316811073003911746514622779992001874409075037973245976299609023867178313200550274791579981490063847585903047671618462828834780979891650959756006736369309609)

        self.assertEqual(rsa_ssh2_pub.export_public_key(encoding=PKIEncoding.SSH2).encode().replace(b'\n', b''), TEST_SSH2_PUB_NO_CMT.replace(b'\n', b''))



    def test_import_openssh(self):
        for key, passphrase in [TEST_OPENSSH0, TEST_OPENSSH1, TEST_OPENSSH2, TEST_OPENSSH3]:
            if passphrase:
                with self.assertRaises(DecryptionException):
                    RSA.import_key(key).key

            rsa = RSA.import_key(key, passphrase=passphrase).key
            self.assertEqual(rsa.p * rsa.q, rsa.n)
            self.assertEqual(rsa.alt_d, mod_inv(rsa.e, (rsa.p - 1) * (rsa.q - 1)))
            self.assertTrue(is_prime(rsa.p))
            self.assertTrue(is_prime(rsa.q))



    def test_openssh_gauntlet(self):
        num_runs = 6
        num_enc = num_runs // 3
        for i in range(num_runs):
            bits = 128 + (Bytes.random(2).int() % (4096 - 128))
            rsa  = RSA(bits)
            passphrase = None
            encryption = None

            if i < num_enc:
                encryption = b'aes256-ctr'
                passphrase = Bytes.random(Bytes.random(1).int())

            priv        = rsa.export_private_key(encoding=PKIEncoding.OpenSSH).encode(encryption=encryption, passphrase=passphrase)
            pub_openssh = rsa.export_public_key(encoding=PKIEncoding.OpenSSH).encode()
            pub_ssh2    = rsa.export_public_key(encoding=PKIEncoding.SSH2).encode()

            new_priv        = RSA.import_key(priv, passphrase=passphrase).key
            new_pub_openssh = RSA.import_key(pub_openssh).key
            new_pub_ssh2    = RSA.import_key(pub_ssh2).key

            self.assertEqual((new_priv.d, new_priv.e, new_priv.n, new_priv.p, new_priv.q), (rsa.d, rsa.e, rsa.n, rsa.p, rsa.q))
            self.assertEqual((new_pub_openssh.e, new_pub_openssh.n), (rsa.e, rsa.n))
            self.assertEqual((new_pub_ssh2.e, new_pub_ssh2.n), (rsa.e, rsa.n))



    def test_import_jwk(self):
        rsa      = RSA.import_key(TEST_JWK).key
        priv_jwk = rsa.export_private_key(encoding=PKIEncoding.JWK).encode()

        self.assertEqual(priv_jwk, TEST_JWK)



    def test_jwk_gauntlet(self):
        for _ in range(100):
            rsa = RSA(1024)

            priv = rsa.export_private_key(encoding=PKIEncoding.JWK).encode()
            pub  = rsa.export_public_key(encoding=PKIEncoding.JWK).encode()

            new_priv = RSA.import_key(priv).key
            new_pub  = RSA.import_key(pub).key

            self.assertEqual((new_priv.d, new_priv.n, new_priv.e), (rsa.d, rsa.n, rsa.e))
            self.assertEqual((new_pub.n, new_pub.e), (rsa.n, rsa.e))



    def test_import_x509_cert(self):
        from subprocess import check_call

        rsa = RSA.import_key(TEST_X509_CERT).key
        self.assertEqual((rsa.n, rsa.e), (20610613182366935712704430937310221613534562009948079789360453139910836064941977579908816718964543026281318436151676011110161911330939696498276776328767963169924766263613120148750878393738643775336834994232750269121171496638721145925440236992515720886919332303626091341082673908400068674399845813788179494391992902026084622226552237412130605804686837213484458829751479165161843145474359043291343036771933142460660698742069747900485297316236559451091673622347679667437351203815946583872835580939553583968621857705820720681124927525077143151996560098282758335232786356354477898597546915310745330577744741027892958321197, 65537))

        cert = rsa.export_public_key(encoding=PKIEncoding.X509_CERT).encode(signing_key=RSA(512)).decode()
        check_call([f'echo -n \"{cert}\" | openssl x509 -text'], shell=True)



    def test_import_x509(self):
        rsa = RSA.import_key(TEST_X509).key
        self.assertEqual((rsa.n, rsa.e), (24940683201879137993056120312454473942594318232290600735533280813657819079216867596712294845341701840650539113593082459581192282077758505643187412712080936552854003723249342272875345512981239150545161577739015704663222308367346717190651433566838090248539539684067138040760166497684693081358176609716700732118835147703707164874725475008676983042554525064000012095164085296963339592428935499593551005865083467668896772193959564280661680461005515765882973709774222632895423473512678883713520905183203401266909934112053801007749095605556769087928322759818966788666176216229944621540846530277052278166189462503753144895461, 65537))
        self.assertEqual(rsa.export_public_key(encoding=PKIEncoding.X509).encode().replace(b'\n', b''), TEST_X509.replace(b'\n', b''))


    def test_import_pkcs1(self):
        rsa_priv = RSA.import_key(TEST_PKCS1_PRIV).key
        rsa_pub  = RSA.import_key(TEST_PKCS1_PUB).key

        priv_out = rsa_priv.export_private_key(encoding=PKIEncoding.PKCS1, marker='RSA PRIVATE KEY').encode()
        pub_out  = rsa_priv.export_public_key(encoding=PKIEncoding.PKCS1, marker='RSA PUBLIC KEY').encode()

        self.assertEqual((rsa_priv.p, rsa_priv.q, rsa_priv.d, rsa_priv.e), (166139291584298120902443024169830845883823889075313984939917653208853637890905161126081148766441591539160401657770377684418968678267217917397922110840150169955546544901086157269951344598822644183037291254655299911780341794815716113854851191488541745191877611504429644948688088285889033976663223284567224856833, 150119113690962013024882886767787358736438702874024877639987005001513857060716647340813407248335373915813194132699511163987634021103271207272747869072785907538172094131387346081221837644849184613482205496553768651031911865532714182752679665482800511607578006666579667465077298743858640016483407400610361062117, 261443907406365378354663085808874736386503755521058985081882965637470767771213025297791271476414073951003560905113869260605140573834934363441563582910410964978725003553295056860481290987047183978890184230384420847820829849525721267527923689830443383138481525900699205548045140667247267145170931395629543661831064542899777508230897484324075615967481549633013603167452463475949339014097601443520652166671659780291518107163852587423275987949452420808289251299490423174099687524419810127240076379136338103470684200785820699599792642573784713209902559428358302232211377555678297104998775430839041504293459045414977936385, 65537))
        self.assertEqual((rsa_priv.n, rsa_priv.e), (rsa_pub.n, rsa_pub.e))

        self.assertEqual(priv_out.replace(b'\n', b''), TEST_PKCS1_PRIV.replace(b'\n', b''))
        self.assertEqual(pub_out.replace(b'\n', b''), TEST_PKCS1_PUB.replace(b'\n', b''))



    def test_import_pkcs8(self):
        rsa_priv = RSA.import_key(TEST_PKCS8_PRIV).key

        priv_out = rsa_priv.export_private_key(encoding=PKIEncoding.PKCS8).encode()

        self.assertEqual((rsa_priv.p, rsa_priv.q, rsa_priv.d, rsa_priv.e), (166139291584298120902443024169830845883823889075313984939917653208853637890905161126081148766441591539160401657770377684418968678267217917397922110840150169955546544901086157269951344598822644183037291254655299911780341794815716113854851191488541745191877611504429644948688088285889033976663223284567224856833, 150119113690962013024882886767787358736438702874024877639987005001513857060716647340813407248335373915813194132699511163987634021103271207272747869072785907538172094131387346081221837644849184613482205496553768651031911865532714182752679665482800511607578006666579667465077298743858640016483407400610361062117, 261443907406365378354663085808874736386503755521058985081882965637470767771213025297791271476414073951003560905113869260605140573834934363441563582910410964978725003553295056860481290987047183978890184230384420847820829849525721267527923689830443383138481525900699205548045140667247267145170931395629543661831064542899777508230897484324075615967481549633013603167452463475949339014097601443520652166671659780291518107163852587423275987949452420808289251299490423174099687524419810127240076379136338103470684200785820699599792642573784713209902559428358302232211377555678297104998775430839041504293459045414977936385, 65537))
        self.assertEqual(priv_out.replace(b'\n', b''), TEST_PKCS8_PRIV.replace(b'\n', b''))



    def test_factor_from_shared_p(self):
        for _ in range(5):
            a_d = 0
            b_d = 0

            while a_d == b_d:
                bits  = max(3, Bytes.random(2).int() >> 4)
                rsa_a = RSA(bits, e=65537)
                rsa_b = RSA(bits, e=65537, p=rsa_a.p)

                a_d = rsa_a.d
                b_d = rsa_b.d

            self.assertNotEqual(rsa_a.d, rsa_b.d)

            new_rsa_a, new_rsa_b = RSA.factor_from_shared_p(rsa_a.n, rsa_b.n, rsa_a.e)

            self.assertEqual((rsa_a.d, rsa_a.e, rsa_a.n, rsa_a.p, rsa_a.q), (new_rsa_a.d, new_rsa_a.e, new_rsa_a.n, new_rsa_a.p, new_rsa_a.q))
            self.assertEqual((rsa_b.d, rsa_b.e, rsa_b.n, rsa_b.p, rsa_b.q), (new_rsa_b.d, new_rsa_b.e, new_rsa_b.n, new_rsa_b.p, new_rsa_b.q))



    def test_factor_from_d(self):
        for _ in range(5):
            bits = max(1, Bytes.random(2).int() >> 4)
            rsa_a = RSA(bits, e=65537)
            new_rsa_a = RSA.factor_from_d(rsa_a.d, rsa_a.n, rsa_a.e)

            # Here we sort p and q since we don't know which found prime will be assigned to which variable
            self.assertEqual((rsa_a.d, rsa_a.e, rsa_a.n, sorted([rsa_a.p, rsa_a.q])), (new_rsa_a.d, new_rsa_a.e, new_rsa_a.n, sorted([new_rsa_a.p, new_rsa_a.q])))
