from samson.block_ciphers.tea import TEA
from samson.utilities.bytes import Bytes
import unittest

# https://github.com/liut/TeaCrypt/blob/master/tea/tea_test.go
class TEATestCase(unittest.TestCase):
    def _run_test(self, key, pt, ct):
        tea = TEA(key)

        genned_ct = tea.encrypt(pt)
        self.assertEqual(genned_ct, ct)
        self.assertEqual(tea.decrypt(genned_ct), pt)
    

    def test_vec0(self):
        pt  = Bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        key = Bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        ct  = Bytes([0x41, 0xEA, 0x3A, 0x0A, 0x94, 0xBA, 0xA9, 0x40])
        self._run_test(key, pt, ct)


    def test_vec1(self):
        pt  = Bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08])
        key = Bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        ct  = Bytes([0x6A, 0x2F, 0x9C, 0xF3, 0xFC, 0xCF, 0x3C, 0x55])
        self._run_test(key, pt, ct)


    def test_vec2(self):
        pt  = Bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08])
        key = Bytes([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF])
        ct  = Bytes([0xDE, 0xB1, 0xC0, 0xA2, 0x7E, 0x74, 0x5D, 0xB3])
        self._run_test(key, pt, ct)


    def test_vec3(self):
        pt  = Bytes([0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF])
        key = Bytes([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF])
        ct  = Bytes([0x12, 0x6C, 0x6B, 0x92, 0xC0, 0x65, 0x3A, 0x3E])
        self._run_test(key, pt, ct)

